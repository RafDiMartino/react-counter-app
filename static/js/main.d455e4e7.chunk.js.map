{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","inputVal","setInputVal","counterUpLive","setCounterUpLive","counterDownLive","setCounterDownLive","useEffect","setTimeout","countChange","value","className","onChange","e","target","type","onClick","Number","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAyEeA,MAvEf,WACE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAyCJ,oBAAS,GAAlD,mBAAMK,EAAN,KAAqBC,EAArB,KACA,EAA6CN,oBAAS,GAAtD,mBAAMO,EAAN,KAAuBC,EAAvB,KAEAC,qBAAU,WACLJ,GACDK,YAAW,WACTR,EAASD,EAAQ,KAChB,OAEJ,CAACA,EAAOI,IAEXI,qBAAU,WACLF,GACDG,YAAW,WACTR,EAASD,EAAQ,KAChB,OAEJ,CAACA,EAAOM,IAEX,IAAMI,EAAc,SAAAC,GAAK,OAAI,WAC3BV,EAASU,KAyBX,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,yBACA,sBAAKA,UAAU,WAAf,UACE,sDAAwB,uBACtB,uBAAOC,SA3BM,SAAAC,GACnBX,EAAYW,EAAEC,OAAOJ,QA0BgBA,MAAOT,EAAUc,KAAK,WAEvD,wBAAQJ,UAAU,YAAYK,QApBV,WACxBhB,EAASiB,OAAOhB,IAChBC,EAAY,KAkBR,uBAEF,qBAAKS,UAAU,QAAf,SAAwBZ,IACxB,sBAAKY,UAAU,uBAAf,UACE,wBAAQA,UAAU,cAAcK,QAASP,EAAYV,EAAQ,GAA7D,eACA,wBAAQY,UAAU,oBAAoBK,QA9BzB,WACjBhB,EAAS,GACTkB,OAAOC,SAASC,UA4BZ,eACA,wBAAQT,UAAU,cAAcK,QAASP,EAAYV,EAAQ,GAA7D,kBAEF,sBAAKY,UAAU,qBAAf,UACE,yBAAQA,UAAU,YAAYK,QApBZ,WACtBV,GAAoBD,IAmBhB,UAAyDA,EAAkB,OAAS,QAAQ,uBAA5F,iBACA,yBAAQM,UAAU,YAAYK,QAzBd,WACpBZ,GAAkBD,IAwBd,UAAuDA,EAAgB,OAAS,QAAQ,uBAAxF,sBCvDOkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,K","file":"static/js/main.d455e4e7.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [inputVal, setInputVal] = useState(\"\");\n  const[counterUpLive, setCounterUpLive] = useState(false);\n  const[counterDownLive, setCounterDownLive] = useState(false);\n\n  useEffect(() => {\n    if(counterUpLive){\n      setTimeout(() => {\n        setCount(count + 1)\n      }, 1000);\n    }\n  }, [count, counterUpLive]);\n\n  useEffect(() => {\n    if(counterDownLive){\n      setTimeout(() => {\n        setCount(count - 1)\n      }, 1000);\n    }\n  }, [count, counterDownLive]);\n\n  const countChange = value => () => {\n    setCount(value)\n  }\n\n  const handleChange = e => {\n    setInputVal(e.target.value)\n  }\n\n  const countClear = () => {\n    setCount(0)\n    window.location.reload()\n  }\n\n  const handleClickUpdate = () => {\n    setCount(Number(inputVal))\n    setInputVal(\"\")\n  }\n\n  const handleCountUp = () => {\n    setCounterUpLive(!counterUpLive);\n  }\n\n  const handleCountDown = () => {\n    setCounterDownLive(!counterDownLive);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Counter App</h1>\n      <div className=\"setCount\">\n        <label>Start count from <br />\n          <input onChange={handleChange} value={inputVal} type=\"tel\" />\n        </label>\n        <button className=\"btnUpdate\" onClick={handleClickUpdate}>Update</button>\n      </div>\n      <div className=\"count\">{count}</div>\n      <div className=\"manualCountContainer\">\n        <button className=\"manualCount\" onClick={countChange(count - 1)}>-</button>\n        <button className=\"manualCount reset\" onClick={countClear}>C</button>\n        <button className=\"manualCount\" onClick={countChange(count + 1)}>+</button>\n      </div>\n      <div className=\"autoCountContainer\">\n        <button className=\"autoCount\" onClick={handleCountDown}>{counterDownLive ? \"Stop\" : \"Start\"}<br /> count down</button>\n        <button className=\"autoCount\" onClick={handleCountUp}>{counterUpLive ? \"Stop\" : \"Start\"}<br /> count up</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}